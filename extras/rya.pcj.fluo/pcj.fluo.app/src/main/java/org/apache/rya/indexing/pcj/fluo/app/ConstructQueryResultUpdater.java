package org.apache.rya.indexing.pcj.fluo.app;
import java.util.ArrayList;
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import java.util.Set;

import org.apache.fluo.api.client.TransactionBase;
import org.apache.fluo.api.data.Bytes;
import org.apache.fluo.api.data.Column;
import org.apache.log4j.Logger;
import org.apache.rya.api.domain.RyaStatement;
import org.apache.rya.api.domain.RyaSubGraph;
import org.apache.rya.indexing.pcj.fluo.app.export.kafka.RyaStatementKafkaSerializer;
import org.apache.rya.indexing.pcj.fluo.app.export.kafka.RyaSubGraphKafkaSerializer;
import org.apache.rya.indexing.pcj.fluo.app.query.ConstructQueryMetadata;
import org.apache.rya.indexing.pcj.fluo.app.query.FluoQueryColumns;
import org.apache.rya.indexing.pcj.storage.accumulo.VisibilityBindingSet;

public class ConstructQueryResultUpdater {

    private static final Logger log = Logger.getLogger(ConstructQueryResultUpdater.class);
    private static final RyaSubGraphKafkaSerializer serializer = new RyaSubGraphKafkaSerializer();
    
    public void updateConstructQueryResults(TransactionBase tx, VisibilityBindingSet bs, ConstructQueryMetadata metadata) {
        
        String nodeId = metadata.getNodeId();
        Column column = FluoQueryColumns.CONSTRUCT_STATEMENTS;
        ConstructGraph graph = metadata.getConstructGraph();

        try {
            Set<RyaStatement> statements = graph.createGraphFromBindingSet(bs);
            RyaSubGraph subgraph = new RyaSubGraph(metadata.getNodeId(), new ArrayList<>(statements));
            tx.set(Bytes.of(nodeId), column, Bytes.of(serializer.toBytes(subgraph)));
        } catch (Exception e) {
            log.trace("Unable to serialize RyaStatement generated by ConstructGraph: " + graph + " from BindingSet: " + bs );
        }
    }

}
